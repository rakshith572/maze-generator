// rectangle for vreating maze

ArrayList<cell>grid=new ArrayList<cell>();
ArrayList<cell>stack=new ArrayList<cell>();
// number of rows
int rows;
// number of columns
int columns;

// width of each sqare
  int w=20;
cell current;
void setup(){
  size(600,600);
  rows=floor(height/w);
  columns=floor(width/w);
  for(int i=0;i<rows;i++){
     for(int j=0;j<columns;j++){
       grid.add(new cell(j,i));
     }
  }
  //frameRate(5);
  current=grid.get(0);
}
void draw(){
  background(51);
  for(int i=0;i<grid.size();i++){
     grid.get(i).show();
  }
  current.visited=true;
  current.highLight();
  cell next=current.checkNeighbour();
  if(next!=null){
    next.visited=true;
    stack.add(current);
    removeWal(current,next);
    current=next;
  }else if(stack.size()>0){
   current=stack.remove(stack.size()-1); 
  }
  
}
int index(int i,int j){
  if(i<0 || j<0 || i>columns-1 || j> rows-1){
    return 0;
  }
  return i+j*columns;
}
void removeWal(cell a,cell b){
   int x=a.i-b.i; 
   if(x==1){
     a.left=false;
     b.right=false;
   }else if(x==-1){
     a.right=false;
     b.left=false;
   }
   int y=a.j-b.j;
   if(y==1){
     a.top=false;
     b.bottom=false;
   }else if(y==-1){
     a.bottom=false;
     b.top=false;
   }
}
class cell{
 int i;
 int j;
 boolean top=true;
 boolean right=true;
 boolean bottom=true;
 boolean left=true;
 boolean visited=false;
 cell(int i,int j){
   this.i=i;
   this.j=j;
 }
 void highLight(){
   int x=i*w;
   int y=j*w;
   noStroke();
    fill(0, 0, 255, 100);
   rect(x,y,w,w);
 }
 cell checkNeighbour(){
    ArrayList<cell>neighbour=new ArrayList<cell>(); 
    cell topC=grid.get(index(i-1,j));
    cell rightC=grid.get(index(i,j+1));
    cell bottomC=grid.get(index(i+1,j));
    cell leftC=grid.get(index(i,j-1));
    if( topC!=null && topC.visited==false){
      neighbour.add(topC);
    }
    if(rightC!=null && rightC.visited==false){
      neighbour.add(rightC);
    }
    if(bottomC!=null && bottomC.visited==false){
      neighbour.add(bottomC);
    }
    if(leftC!=null && leftC.visited==false){
      neighbour.add(leftC);
    }
    if(neighbour.size()>0){
      int t=floor(random(0,neighbour.size()));
      return neighbour.get(t);
    }else{
     return  null; 
    }
 }
 void show() {
    int x = this.i*w;
    int y = this.j*w;
    stroke(255);
    if (top) {
      line(x,y,x + w, y);
    }
    if (right) {
      line(x + w, y, x + w, y + w);
    }
    if (bottom) {
      line(x + w, y + w, x , y + w);
    }
    if (left) {
      line(x,y + w,x,y);
    }
    if(this.visited){
      noStroke();
      fill(255,0,255,100);
      rect(x,y,w,w);
    }
  }
}
